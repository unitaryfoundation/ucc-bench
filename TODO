1. Add expectation value paths/options

   raw_circuit      -> Noise -> observable (property of density matrix or of statevector)
   compiled_circuit -> Noise -> observable
     circuit -> save density matrix at end

    observable_metrics(raw_qiskit, compiled_qiskit, sim_settings):
        raw_qiskit.save_density_matrix()
        compiled_qiskit.save_density_matrix()

        # no noise
        raw ->
        compiled ->
          # if exp value
          statevector from circuit
          # if HOPF/counts of circuit measurement
          - first heavy bitstrings, statevector sim of circuit, counts/filter
          - then statevector sim of circuit, count which are heavy from prior
        # with noise
        raw
        compiled
          # if exp value
          Aer sim, density matrix,
           # if HOPF/counts of circuit measurement
             - first heavy bitstrings, statevector sim of circuit, counts/filter
            - then statevector sim of circuit with noise, count which are heavy from prior

        1. CREATE results type
        2. Consider whether to use decorator vs ABC for registering -- seems its always single function? Better to keep pattern
        3. Cleanup HOPF nested functions, its messy
        4. Add unit tests
        5. Decide on toml schema and validation
        6. Add to runner and results


2. Add documention (the how to's in README
----------

------------------
8. Import legacy data
-----------------
4. Add plotter helpers

5. Add PR helper -> do not persist results
   Two types of PRs
    PR in ucc-bench repo (updating something about benchmark code)
      run benchmarks on changest in PR and compare to results for prior commit
    PR in ucc repo (updating something about UCC)
      create a version of this repo that uses pre-release version of UCC (specific hash)
      do the same as above

--- Demo here
3. Add reporter that converts to flat view of performance
6. Add github actions
7. Run in parallel with main repo, then switch when ready



------- work out versionion and hash ------------

benchmark results -> per set of compilers
  hash of ucc-bench PR => set of compilers

So at any point in time, ucc-bench is pointing to specific hash/tag release for UCC dependency
1. When merge to main in UCC -> downstream kicks-off PR to update benchmark results to hash of that version, auto-commits results
2. When open a PR in UCC -> nothing is commited back, but downstream runs comparision, assumes ancestor hash is in ucc-bench results history
   Does diff -> how to look up ancestor hash?
3. When open a PR in ucc-bench, e.g. upgrade another compiler version -> opens PR (for review) that includes benchmark changes

What is ordering for plots over time
  date
What is most recent/latest?

any other change to benchmarks (adding circuit, output) is a new version/set of results


ucc-bench <> not ok to fail
hash (commit on main)-> compiler versions, benchmark configs, etc.
 -> properly time-ordered, can do by time

ucc PR <> ok if fails
only have ucc hash/versions, how do I lookup my ancestor PR
  -> secondary index? ucc version hash -> version of ucc-bench with those results

---------------------------------------------
ucc-bench after merge to main with tip hash H
Trigger - commit to main that is not chore
No cancelling, always run
//
1. Checkout code @ H
2. Run both types of benchmarks (using uid of that H and that hash time)
3. Store results
5. Commit back to repo as a bench(H)
----------------------------------------------
update plots every X hours
trigger - cron
No cancelling, always run
1. Checkout tip of ucc-bench
2. Generate plots from most recent hash (ignoring the chore commits)
----------------------------------------------
ucc-merge to main with tip hash H -> open a ucc-bench PR to main
Trigger - ucc-merge to main (for now, non chore/benchark commits)
No cancelling, always run, but only run for that final commit, not all commits along the way
//
1. ucc-bench checkout tip of main
2. uv upgrades to ucc to version H on branch auto-benchmark-H
3. create commit, include ucc-bench H in commit message
4. set commit to auto-merge if checks are successful
-----------------------------------------------
PR on open ucc-bench PR to main
Trigger - PR open, PR updated (change to commits)
Cancel existing job if retriggered for same PR
//
1. IF is auto-benchmark/labeled (so was already benchmarked), just add a comment with link to ucc PR
2. If is not, then
   - Checkout code
   - Run benchmarks
   - Do a diff against benchmark results for ancestor on main
     - Note this is the most recent NON-chore commit to main, e.g. a commit that
       reflects a true change.
     - If none exists, bail
   - Add comment
------------------------------------------------
PR on ucc to main
Trigger - PR open, PR updated (change to commits) in *ucc*
Cancel existing job if retriggered for same PR
//
1. Checkout ucc-bench code
2. Upgrade to the tip commit of ucc branch/hash
3. run benchmarks
4. Compare to common ancestor results on ucc main branch
    Should be the ucc-bench commit that wasn't a chore
    How do we find this??? Do we store in bench(foo,bar)?
    Do we add a mapping file/metadata to the ucc-bench run, if it was triggered
    by ucc commit? (Yes, seems better)

Failure modes
1. PR comparison breaks, annoying but can live with it
2. ucc -> ucc-bench trigger breaks, annoying, but can manually kick them off
3. ucc-bench -> out of order results,  impactes
              REVIEW - plots by time --- any other data to re-order? use ucc git commit date, when subset on just UCC data
                  Use auxiliary ucc uid date/hash to order the UCC results, and use other date for non-ucc results
                  Make this explicit (annoying but ok)
              "most recent ancestor" in PR diff (ok, just ignore if can't explicitly find)

ucc-benchmark results aren't necessarily time ordered (e.g. multiple commits come in)
Always make the plots for latest/over-time time ordered based on what is in the queue?

So
#1. Add auxiliary data to simulation results, command line to specify
2. Build github actions in order above (DONE ucc-bench, trigger ucc-bench, cron for plots, PRs)


If we use a the temporary PR kciked off from ucc -> ucc-bench with automerge, we end
up with conflicts if more than one is in flight at the same time. The main reason to do this
was to ensure unit tests/benchmarks still run, but that is overkill as the PR run should already have done that

Instead, eliminate this and just make a job that commits to main directly and upgrades the ucc version.
That should be quick and if we make only one instance of that job run at a time, should avoid conflicts
